{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"cheat/","text":"Executable Code (REPLIT) \u00b6 Change values ASTRA_DB_TOKEN , ASTRA_DB_ID , ASTRA_DB_REGION , ASTRA_DB_KEYSPACE in the code below and execute with Mermaids \u00b6 1\ufe0f\u20e3 Flow \u00b6 Cassandra Graph Code graph LR user>fa:fa-user Developer]-- Create Database --> cassandra[(fa:fa-database Cassandra)] user-- Design -->usecase{{fa:fa-cube Use Case}} usecase-- Workflow -->queries[fa:fa-bezier-curve queries] usecase-- MCD -->entities[fa:fa-grip-vertical entities] queries-- Chebotko modelization -->schema[fa:fa-list schema] entities-- Chebotko modelization -->schema[fa:fa-list schema] schema[fa:fa-list schema]-- Inject -->cassandra[(fa:fa-database Cassandra)] user-- prepare -->dataset{{fa:fa-coings DataSet}} dataset-- input -->dsbulk-- load data -->cassandra user-- Create Token -->token{{fa:fa-key Token}} usecase-->API API-->Request token-->Request schema-->Request Request-- invoke -->cassandra graph LR user>fa:fa-user Developer ] -- Create Database --> cassandra [( fa:fa-database Cassandra )] user-- Design -->usecase {{ fa:fa-cube Use Case }} usecase-- Workflow -->queries [ fa:fa-bezier-curve queries ] usecase-- MCD -->entities [ fa:fa-grip-vertical entities ] queries-- Chebotko modelization -->schema [ fa:fa-list schema ] entities-- Chebotko modelization -->schema [ fa:fa-list schema ] schema [ fa:fa-list schema ] -- Inject -->cassandra [( fa:fa-database Cassandra )] user-- prepare -->dataset {{ fa:fa-coings DataSet }} dataset-- input -->dsbulk-- load data -->cassandra user-- Create Token -->token {{ fa:fa-key Token }} usecase-->API API-->Request token-->Request schema-->Request Request-- invoke -->cassandra Example #1 Output Markdown graph TD; A-->B; A-->C; B-->D; C-->D; ```mermaid graph TD; A-->B; A-->C; B-->D; C-->D; ``` Example3 Output Markdown graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ```mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ``` 2\ufe0f\u20e3 Sequence \u00b6 Output Markdown sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ```mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` 3\ufe0f\u20e3 Gantt \u00b6 Output Markdown gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` 4\ufe0f\u20e3 Class \u00b6 Output Markdown classDiagram Class01 <|-- AveryLongClass : Cool <<interface>> Class01 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { <<service>> int id size() } ```mermaid classDiagram Class01 <|-- AveryLongClass : Cool <<interface>> Class01 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { <<service>> int id size() } ``` 5\ufe0f\u20e3 State \u00b6 Output Markdown stateDiagram-v2 [*] --> Still Still --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> [*] ```mermaid stateDiagram-v2 [*] --> Still Still --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> [*] ``` 6\ufe0f\u20e3 Pie \u00b6 Output Markdown pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 ```mermaid pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 ``` 7\ufe0f\u20e3 Journey \u00b6 Output Markdown journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me ```mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me ``` 8\ufe0f\u20e3 ER \u00b6 Output Markdown erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ```mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` Sample Blocs \u00b6 THis is a note my note abstract my note info info Sample tip tip How to add plugins to the Docker image? Import Stuff Success my note Sample warning This is so cool. failure my note danger danger bug bug Sample example example Sample warning warning Sample wuote quote Tooltip \u00b6 wanna a tooltip ? # (1)! Cedrick rock mkdocs serve Icons \u00b6 Material \u00b6 HERE is the full list Font Awesome \u00b6 HTML = fa-camera-retro MARKDOWN HERE is the full list Opticons \u00b6 Sample Adding buttons \u00b6 In order to render a link as a button, suffix it with curly braces and add the .md-button class selector to it. The button will receive the selected [primary color] and [accent color] if active. Button [ Subscribe to our newsletter ]( # ){ .md-button } [Subscribe to our newsletter][demo]{ .md-button } [Subscribe to our newsletter][demo]{ .md-button .md-button--primary }","title":"Cheat"},{"location":"cheat/#executable-code-replit","text":"Change values ASTRA_DB_TOKEN , ASTRA_DB_ID , ASTRA_DB_REGION , ASTRA_DB_KEYSPACE in the code below and execute with","title":"Executable Code (REPLIT)"},{"location":"cheat/#mermaids","text":"","title":"Mermaids"},{"location":"cheat/#1-flow","text":"Cassandra Graph Code graph LR user>fa:fa-user Developer]-- Create Database --> cassandra[(fa:fa-database Cassandra)] user-- Design -->usecase{{fa:fa-cube Use Case}} usecase-- Workflow -->queries[fa:fa-bezier-curve queries] usecase-- MCD -->entities[fa:fa-grip-vertical entities] queries-- Chebotko modelization -->schema[fa:fa-list schema] entities-- Chebotko modelization -->schema[fa:fa-list schema] schema[fa:fa-list schema]-- Inject -->cassandra[(fa:fa-database Cassandra)] user-- prepare -->dataset{{fa:fa-coings DataSet}} dataset-- input -->dsbulk-- load data -->cassandra user-- Create Token -->token{{fa:fa-key Token}} usecase-->API API-->Request token-->Request schema-->Request Request-- invoke -->cassandra graph LR user>fa:fa-user Developer ] -- Create Database --> cassandra [( fa:fa-database Cassandra )] user-- Design -->usecase {{ fa:fa-cube Use Case }} usecase-- Workflow -->queries [ fa:fa-bezier-curve queries ] usecase-- MCD -->entities [ fa:fa-grip-vertical entities ] queries-- Chebotko modelization -->schema [ fa:fa-list schema ] entities-- Chebotko modelization -->schema [ fa:fa-list schema ] schema [ fa:fa-list schema ] -- Inject -->cassandra [( fa:fa-database Cassandra )] user-- prepare -->dataset {{ fa:fa-coings DataSet }} dataset-- input -->dsbulk-- load data -->cassandra user-- Create Token -->token {{ fa:fa-key Token }} usecase-->API API-->Request token-->Request schema-->Request Request-- invoke -->cassandra Example #1 Output Markdown graph TD; A-->B; A-->C; B-->D; C-->D; ```mermaid graph TD; A-->B; A-->C; B-->D; C-->D; ``` Example3 Output Markdown graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ```mermaid graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] ```","title":"1\ufe0f\u20e3 Flow"},{"location":"cheat/#2-sequence","text":"Output Markdown sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ```mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ```","title":"2\ufe0f\u20e3 Sequence"},{"location":"cheat/#3-gantt","text":"Output Markdown gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```","title":"3\ufe0f\u20e3 Gantt"},{"location":"cheat/#4-class","text":"Output Markdown classDiagram Class01 <|-- AveryLongClass : Cool <<interface>> Class01 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { <<service>> int id size() } ```mermaid classDiagram Class01 <|-- AveryLongClass : Cool <<interface>> Class01 Class09 --> C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { <<service>> int id size() } ```","title":"4\ufe0f\u20e3 Class"},{"location":"cheat/#5-state","text":"Output Markdown stateDiagram-v2 [*] --> Still Still --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> [*] ```mermaid stateDiagram-v2 [*] --> Still Still --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> [*] ```","title":"5\ufe0f\u20e3 State"},{"location":"cheat/#6-pie","text":"Output Markdown pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 ```mermaid pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 ```","title":"6\ufe0f\u20e3 Pie"},{"location":"cheat/#7-journey","text":"Output Markdown journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me ```mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me ```","title":"7\ufe0f\u20e3 Journey"},{"location":"cheat/#8-er","text":"Output Markdown erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ```mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ```","title":"8\ufe0f\u20e3 ER"},{"location":"cheat/#sample-blocs","text":"THis is a note my note abstract my note info info Sample tip tip How to add plugins to the Docker image? Import Stuff Success my note Sample warning This is so cool. failure my note danger danger bug bug Sample example example Sample warning warning Sample wuote quote","title":"Sample Blocs"},{"location":"cheat/#tooltip","text":"wanna a tooltip ? # (1)! Cedrick rock mkdocs serve","title":"Tooltip"},{"location":"cheat/#icons","text":"","title":"Icons"},{"location":"cheat/#material","text":"HERE is the full list","title":"Material"},{"location":"cheat/#font-awesome","text":"HTML = fa-camera-retro MARKDOWN HERE is the full list","title":"Font Awesome"},{"location":"cheat/#opticons","text":"Sample","title":"Opticons"},{"location":"cheat/#adding-buttons","text":"In order to render a link as a button, suffix it with curly braces and add the .md-button class selector to it. The button will receive the selected [primary color] and [accent color] if active. Button [ Subscribe to our newsletter ]( # ){ .md-button } [Subscribe to our newsletter][demo]{ .md-button } [Subscribe to our newsletter][demo]{ .md-button .md-button--primary }","title":"Adding buttons"},{"location":"pages/configuration/","text":"Configuration Home","title":"Architecture"},{"location":"pages/advanced/aop/","text":"This is aop.md","title":"\u2023 Aspect Oriented Programming"},{"location":"pages/advanced/caching/","text":"This is caching.md","title":"\u2023 Caching"},{"location":"pages/advanced/cli/","text":"This is cli.md","title":"\u2023 Command line interface"},{"location":"pages/advanced/feature-groups/","text":"This is feature groups","title":"\u2023 Features Groups"},{"location":"pages/advanced/jmx/","text":"This is jmx.md","title":"\u2023 JMX Support"},{"location":"pages/advanced/spring-boot/","text":"This is spring-boot.md","title":"\u2023 Spring Boot"},{"location":"pages/basics/","text":"Introductory Video \u00b6 A 15-min video going over the main use cases and a demo with microservices. The associated source code can be found here Test with Docker \u00b6 Prerequisites Having docker installed \u2705 Step A. - Having a docker engine on your machine, start a container with the following docker run -p 8080:8080 ff4j/ff4j-sample-springboot2x:1.8.5 \ud83d\udc41\ufe0f Expected Console _____ _____ _____ __ _/ ____ \\/ ____ \\/ | | | __ | \\ __ \\\\ __ \\/ | | _ | | | | | | / ^ / | | | __ | | __ | \\_ ___ / \\_ _ | | | __ \\_ _____ | Brought to you by FF4j Developments team If you like us, consider to give a \u2b50 on github, that helps s! https://github.com/ff4j/ff4j/stargazers The application should be available on http://localhost:8080 15 :30:17.803 INFO org.ff4j.sample.Application : Starting Application v1.8.5 on 9a94abfcef56 with PID 1 ( /app.jar started by root in / ) 15 :30:17.810 INFO org.ff4j.sample.Application : No active profile set, falling back to default profiles: default 15 :30:21.827 INFO org.ff4j.sample.HomeController : + Features and properties have been created for the sample. 15 :30:24.181 INFO org.ff4j.sample.Application : Started Application in 7 .275 seconds ( JVM running for 8 .759 ) \u2705 Step B. - Access: http://localhost:8080 . In the basic web page you can see 3 bullets. Each is also a feature of the application that we will enable / disable. \u2705 Step C. - Click web console link \u2705 Step D. - Click Features in the menu or FeatureStore in the General Tab to list features \u2705 Step E. - Disable feature showRestApiUrl by clicking the toggle icon \u2705 Step F. - Back, now select the Properties item in the menu. \u2705 Step G. - Edit value of property username by click the pencil icon \u2705 Step H. - Edit value of property username by click the pencil icon \u2705 Step I. - Going back to the home page you see that only 2 lines are shown (one is disabled) and the property got a new value Your are done ! Spring-Boot Application \u00b6 Prerequisites Java 8+ installed Maven Installed Git installed (optional) \u2705 Step A. - Download the code of the demo Execute the following git or download as a zip git clone https://github.com/ff4j/ff4j-demo.git \u2705 Step B. - Start the demo cd ff4j-demo mvn spring-boot:run \u2705 Step C. - Access the demo Test the running application on localhost:8080 . You should import the code in your IDE as a starting project. It is a spring boot application, it leverages the spring-boot-starter . The following dependency has been added to the pom.xml <dependency> <groupId> org.ff4j </groupId> <artifactId> ff4j-spring-boot-starter </artifactId> <version> ${ff4j.version} </version> </dependency>","title":"Getting Started"},{"location":"pages/basics/#introductory-video","text":"A 15-min video going over the main use cases and a demo with microservices. The associated source code can be found here","title":"Introductory Video"},{"location":"pages/basics/#test-with-docker","text":"Prerequisites Having docker installed \u2705 Step A. - Having a docker engine on your machine, start a container with the following docker run -p 8080:8080 ff4j/ff4j-sample-springboot2x:1.8.5 \ud83d\udc41\ufe0f Expected Console _____ _____ _____ __ _/ ____ \\/ ____ \\/ | | | __ | \\ __ \\\\ __ \\/ | | _ | | | | | | / ^ / | | | __ | | __ | \\_ ___ / \\_ _ | | | __ \\_ _____ | Brought to you by FF4j Developments team If you like us, consider to give a \u2b50 on github, that helps s! https://github.com/ff4j/ff4j/stargazers The application should be available on http://localhost:8080 15 :30:17.803 INFO org.ff4j.sample.Application : Starting Application v1.8.5 on 9a94abfcef56 with PID 1 ( /app.jar started by root in / ) 15 :30:17.810 INFO org.ff4j.sample.Application : No active profile set, falling back to default profiles: default 15 :30:21.827 INFO org.ff4j.sample.HomeController : + Features and properties have been created for the sample. 15 :30:24.181 INFO org.ff4j.sample.Application : Started Application in 7 .275 seconds ( JVM running for 8 .759 ) \u2705 Step B. - Access: http://localhost:8080 . In the basic web page you can see 3 bullets. Each is also a feature of the application that we will enable / disable. \u2705 Step C. - Click web console link \u2705 Step D. - Click Features in the menu or FeatureStore in the General Tab to list features \u2705 Step E. - Disable feature showRestApiUrl by clicking the toggle icon \u2705 Step F. - Back, now select the Properties item in the menu. \u2705 Step G. - Edit value of property username by click the pencil icon \u2705 Step H. - Edit value of property username by click the pencil icon \u2705 Step I. - Going back to the home page you see that only 2 lines are shown (one is disabled) and the property got a new value Your are done !","title":"Test with Docker"},{"location":"pages/basics/#spring-boot-application","text":"Prerequisites Java 8+ installed Maven Installed Git installed (optional) \u2705 Step A. - Download the code of the demo Execute the following git or download as a zip git clone https://github.com/ff4j/ff4j-demo.git \u2705 Step B. - Start the demo cd ff4j-demo mvn spring-boot:run \u2705 Step C. - Access the demo Test the running application on localhost:8080 . You should import the code in your IDE as a starting project. It is a spring boot application, it leverages the spring-boot-starter . The following dependency has been added to the pom.xml <dependency> <groupId> org.ff4j </groupId> <artifactId> ff4j-spring-boot-starter </artifactId> <version> ${ff4j.version} </version> </dependency>","title":"Spring-Boot Application"},{"location":"pages/basics/architecture/","text":"This is architecture.","title":"\u2023 Architecture"},{"location":"pages/basics/feature-store/","text":"This is feature Store","title":"\u2023 Feature Store"},{"location":"pages/basics/feature/","text":"Overview \u00b6 The Feature term is used to represent functionality or treatment in an application. It is identified by an unique identifier (uid). A Feature represents a business logic that can potentially crosses every layer of applications from user interfaces to data access. Therefore, to implement a feature toggle mechanism, we must help you in each layer as shown with the picture on the right. Feature toggle, or feature flag , purpose is to evaluate the state of features at runtime to drive the execution of your code. You can change the state of features at runtime (enable and disable, toggle ON/OFF ). Each feature is associated as a flag. Given a feature with identifier f1 we want to write in the code: if ( ff4j . check ( \"f1\" )) { System . out . println ( \"The feature 'f1' is 'ON'\" ); } else { System . out . println ( \"The feature 'f1' is 'OFF'\" ); } Feature object \u00b6 With the library FF4J , a feature is an object with multiple attributes (not only identifier and state): A text description to explain the purpose An optional groupName to toggle multiple features at once (see FeatureGroup ) An optional set of permissions to implement RBAC access. (see Permissions ) An optional flipping strategy to implement your predicates (see FlippingStrategy ) A key/value map named customProperties to create some context classDiagram Feature --* FlippingStrategy Feature --* Property Feature : enable() Feature : disable() Feature : toJson() Feature : fromJson(...) Feature : getters() Feature : setters() Feature : String uid Feature : boolean enable Feature : String description Feature : String group Feature : Set<String> permissions Feature : Map<String,Property> customProperties FlippingStrategy : getInitParams() FlippingStrategy : evaluate() Property : name Property : value Sample codes \u00b6 You can interact with the Feature object programmatically : Feature f1 = new Feature ( \"f1\" ); Feature f2 = new Feature ( \"f2\" , false , \"sample description\" ); Feature with Permissions : Set < String > permission = new HashSet < String > (); permission . add ( \"BETA-TESTER\" ); permission . add ( \"VIP\" ); Feature f3 = new Feature ( \"f3\" , false , \"desc\" , \"GROUP_1\" , permission ); Feature with Custom Properties : Feature f4 = new Feature ( \"f4\" ); f4 . addProperty ( new PropertyString ( \"p1\" , \"v1\" )); f4 . addProperty ( new PropertyDouble ( \"pie\" , Math . PI )); f4 . addProperty ( new PropertyInt ( \"myAge\" , 12 )); Feature with FlippingStrategy Feature f5 = new Feature ( \"f5\" ); Calendar nextReleaseDate = Calendar . getInstance (); nextReleaseDate . set ( Calendar . MONTH , Calendar . SEPTEMBER ); nextReleaseDate . set ( Calendar . DAY_OF_MONTH , 1 ); f5 . setFlippingStrategy ( new ReleaseDateFlipStrategy ( nextReleaseDate . getTime ())); // Working with DarkLaunch Flipping Strategy Feature f6 = new Feature ( \"f6\" ); f6 . setFlippingStrategy ( new DarkLaunchStrategy ( 0.2d )); // Working with White List Flipping Strategy Feature f7 = new Feature ( \"f7\" ); f7 . setFlippingStrategy ( new WhiteListStrategy ( \"localhost\" )); It is not likely that you do have to create the Features objects on your own (except for tests). They will be stored in the FeatureStore and purpose is really to check the status at runtime. You may want to create them through the webUI or configuration files. Attributes mentionned before are available in the edit modal:","title":"\u2023 Feature Flag"},{"location":"pages/basics/feature/#overview","text":"The Feature term is used to represent functionality or treatment in an application. It is identified by an unique identifier (uid). A Feature represents a business logic that can potentially crosses every layer of applications from user interfaces to data access. Therefore, to implement a feature toggle mechanism, we must help you in each layer as shown with the picture on the right. Feature toggle, or feature flag , purpose is to evaluate the state of features at runtime to drive the execution of your code. You can change the state of features at runtime (enable and disable, toggle ON/OFF ). Each feature is associated as a flag. Given a feature with identifier f1 we want to write in the code: if ( ff4j . check ( \"f1\" )) { System . out . println ( \"The feature 'f1' is 'ON'\" ); } else { System . out . println ( \"The feature 'f1' is 'OFF'\" ); }","title":"Overview"},{"location":"pages/basics/feature/#feature-object","text":"With the library FF4J , a feature is an object with multiple attributes (not only identifier and state): A text description to explain the purpose An optional groupName to toggle multiple features at once (see FeatureGroup ) An optional set of permissions to implement RBAC access. (see Permissions ) An optional flipping strategy to implement your predicates (see FlippingStrategy ) A key/value map named customProperties to create some context classDiagram Feature --* FlippingStrategy Feature --* Property Feature : enable() Feature : disable() Feature : toJson() Feature : fromJson(...) Feature : getters() Feature : setters() Feature : String uid Feature : boolean enable Feature : String description Feature : String group Feature : Set<String> permissions Feature : Map<String,Property> customProperties FlippingStrategy : getInitParams() FlippingStrategy : evaluate() Property : name Property : value","title":"Feature object"},{"location":"pages/basics/feature/#sample-codes","text":"You can interact with the Feature object programmatically : Feature f1 = new Feature ( \"f1\" ); Feature f2 = new Feature ( \"f2\" , false , \"sample description\" ); Feature with Permissions : Set < String > permission = new HashSet < String > (); permission . add ( \"BETA-TESTER\" ); permission . add ( \"VIP\" ); Feature f3 = new Feature ( \"f3\" , false , \"desc\" , \"GROUP_1\" , permission ); Feature with Custom Properties : Feature f4 = new Feature ( \"f4\" ); f4 . addProperty ( new PropertyString ( \"p1\" , \"v1\" )); f4 . addProperty ( new PropertyDouble ( \"pie\" , Math . PI )); f4 . addProperty ( new PropertyInt ( \"myAge\" , 12 )); Feature with FlippingStrategy Feature f5 = new Feature ( \"f5\" ); Calendar nextReleaseDate = Calendar . getInstance (); nextReleaseDate . set ( Calendar . MONTH , Calendar . SEPTEMBER ); nextReleaseDate . set ( Calendar . DAY_OF_MONTH , 1 ); f5 . setFlippingStrategy ( new ReleaseDateFlipStrategy ( nextReleaseDate . getTime ())); // Working with DarkLaunch Flipping Strategy Feature f6 = new Feature ( \"f6\" ); f6 . setFlippingStrategy ( new DarkLaunchStrategy ( 0.2d )); // Working with White List Flipping Strategy Feature f7 = new Feature ( \"f7\" ); f7 . setFlippingStrategy ( new WhiteListStrategy ( \"localhost\" )); It is not likely that you do have to create the Features objects on your own (except for tests). They will be stored in the FeatureStore and purpose is really to check the status at runtime. You may want to create them through the webUI or configuration files. Attributes mentionned before are available in the edit modal:","title":"Sample codes"},{"location":"pages/basics/flipping-strategy/","text":"this is flipping strategy","title":"\u2023 Flipping Strategy"},{"location":"pages/basics/property-store/","text":"This is property Store","title":"\u2023 Property Store"},{"location":"pages/basics/security/","text":"This is security","title":"\u2023 Security"},{"location":"pages/security/","text":"INDEX security","title":"Index"},{"location":"pages/stores/","text":"INDEX stores","title":"Index"},{"location":"pages/strategy/","text":"INDEX strategy","title":"Index"},{"location":"pages/v2/","text":"After 10 years of existence it is now time to think about a new major version for ff4j. The idea is to fix the misconceptions of v1 and to extends the capabilities. V1 Limitations and issues \u00b6 V1 Inaccuracy \u00b6 Monolithic : There is no clear definition of what should be embedded in your application and what would be a shared backend. The code needs to reflect that distinction, Flipping Strategy : The term FlipStrategy is not really accurate and should be renamed ToggleStrategy FF4j should embrace the java languages improvements with Predicate , Optional , Lambda ... We should enforce authentication for any operations, to track and secure V1 Limitations \u00b6 A feature should have a list of ToggleStrategies The backend REST API was a single point of failure, you needed a load balancer, you want to do client-side load balancing The persistence should allow multi-tenancy and or at least multiple applications. The authentication manager does not need to be at FF4j level Each entity should come with an access control list to define who's doing what. V2 Design \u00b6 FF4j is the client part handling connectivity FF4j ff4j = FF4j . Builder (). // Connectivity . withCredentials ( \"admin\" , \"admin\" ) . withBackends ( new BackendRest ( \"http://localhost:8080:\" )) . withSSLPolicy () . withRetryPolicy () . withLoadBalancingPolicy () . withFailoverPolicy () // Applications . withNamespace ( \"applicationX\" ) . withCaching ( ttl , activePolling polling interface ) // Request settings . withPageSize () . withTimeout () . withRequestTracking () . build (); ff4j . feature ( \"f1\" ). find (); ff4j . feature ( \"f1\" ). isToggled (); FF4j Backend","title":"Index"},{"location":"pages/v2/#v1-limitations-and-issues","text":"","title":"V1 Limitations and issues"},{"location":"pages/v2/#v1-inaccuracy","text":"Monolithic : There is no clear definition of what should be embedded in your application and what would be a shared backend. The code needs to reflect that distinction, Flipping Strategy : The term FlipStrategy is not really accurate and should be renamed ToggleStrategy FF4j should embrace the java languages improvements with Predicate , Optional , Lambda ... We should enforce authentication for any operations, to track and secure","title":"V1 Inaccuracy"},{"location":"pages/v2/#v1-limitations","text":"A feature should have a list of ToggleStrategies The backend REST API was a single point of failure, you needed a load balancer, you want to do client-side load balancing The persistence should allow multi-tenancy and or at least multiple applications. The authentication manager does not need to be at FF4j level Each entity should come with an access control list to define who's doing what.","title":"V1 Limitations"},{"location":"pages/v2/#v2-design","text":"FF4j is the client part handling connectivity FF4j ff4j = FF4j . Builder (). // Connectivity . withCredentials ( \"admin\" , \"admin\" ) . withBackends ( new BackendRest ( \"http://localhost:8080:\" )) . withSSLPolicy () . withRetryPolicy () . withLoadBalancingPolicy () . withFailoverPolicy () // Applications . withNamespace ( \"applicationX\" ) . withCaching ( ttl , activePolling polling interface ) // Request settings . withPageSize () . withTimeout () . withRequestTracking () . build (); ff4j . feature ( \"f1\" ). find (); ff4j . feature ( \"f1\" ). isToggled (); FF4j Backend","title":"V2 Design"},{"location":"pages/web/","text":"INDEX web","title":"Index"},{"location":"pages/web/apis/","text":"This is apis","title":"\u2023 REST Api"},{"location":"pages/web/console/","text":"This is console","title":"\u2023 Web Console"},{"location":"pages/web/taglib/","text":"This is taglib","title":"\u2023 Taglib"},{"location":"pages/web/thymeleaf/","text":"This is thymeleaf","title":"\u2023 Thymeleaf tags"}]}